services:
  # Nginx Service
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: leg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html:delegated
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ssl-certs:/etc/nginx/ssl
    networks:
      - leg-network
    depends_on:
      - app
    environment:
      - PERMISSIONS_USER=nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 0.25G
        reservations:
          memory: 0.125G

  # PHP/Laravel Application
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: leg-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html:delegated
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    networks:
      - leg-network
    depends_on:
      - postgres
      - neo4j
      - mongodb
      - redis
      - prometheus
      - grafana
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - PERMISSIONS_USER=www-data
      - RUN_MIGRATIONS=true
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 10s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: leg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: leg
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - leg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 0.75G
        reservations:
          memory: 0.25G

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-enterprise
    container_name: leg-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt  
      - "2004:2004" # Prometheus metrics
    environment:
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_AUTH: neo4j/password123
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_server_metrics_prometheus_enabled: "true"
      NEO4J_server_metrics_prometheus_endpoint: ":2004"
      NEO4J_server_config_strict__validation_enabled: "false"
      # Memory configuration (adjusted for container limits)
      NEO4J_server_memory_heap_initial__size: "512m"
      NEO4J_server_memory_heap_max__size: "1024m"
      NEO4J_server_memory_pagecache_size: "512m"
      # JVM options for ByteBuf leak prevention
      NEO4J_server_jvm_additional: "-XX:+UseG1GC -XX:+UseStringDeduplication -Dio.netty.leakDetection.level=disabled -Dio.netty.recycler.maxCapacity=32 -Dio.netty.allocator.numDirectArenas=2 -Dio.netty.allocator.maxOrder=9 -Dio.netty.allocator.tinyCacheSize=512 -Dio.netty.allocator.smallCacheSize=256 -Dio.netty.allocator.normalCacheSize=64 -Dio.netty.allocator.maxCachedBufferCapacity=32 -Dio.netty.allocator.cacheTrimInterval=8192 -Dio.netty.allocator.cacheThreadLocal=true -Dio.netty.allocator.useCacheForAllThreads=true"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - leg-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 5s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # MongoDB Document Database
  mongodb:
    image: mongo:7
    container_name: leg-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: leg
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: leg
    volumes:
      - mongodb-data:/data/db
      - ./docker/mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - leg-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb://leg:password123@localhost:27017/leg --quiet
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 0.5G
        reservations:
          memory: 0.25G

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: leg-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - leg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 0.25G
        reservations:
          memory: 0.125G

  # Node service for frontend assets
  node:
    image: node:24-alpine
    container_name: leg-node
    working_dir: /var/www/html
#    command: sh -c "npm install && npm run dev"
    command: sh -c "npm install -g npm@11.4.2 && npm install --include=dev && npm run build:fast"
    volumes:
      - ./:/var/www/html
      - node_modules:/var/www/html/node_modules
      - npm_cache:/root/.npm
      - vite_cache:/tmp/vite-cache
    networks:
      - leg-network
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=4096
      - VITE_CACHE_DIR=/tmp/vite-cache
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Queue Worker for background jobs
  queue:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: leg-queue
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html:delegated
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    networks:
      - leg-network
    depends_on:
      - postgres
      - neo4j
      - mongodb
      - redis
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - PERMISSIONS_USER=www-data
    command: php artisan queue:work redis --queue=imports,notifications,default --sleep=1 --tries=3 --max-time=3600 --memory=1024 --timeout=1800
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: leg-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - leg-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 0.5G
        reservations:
          memory: 0.25G

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: leg-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - leg-network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 0.5G
        reservations:
          memory: 0.25G

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: leg-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - leg-network
    command:
      - '--housekeeping_interval=10s'
      - '--docker_only=true'
    deploy:
      resources:
        limits:
          memory: 0.25G
        reservations:
          memory: 0.125G

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: leg-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - leg-network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    deploy:
      resources:
        limits:
          memory: 0.125G
        reservations:
          memory: 0.0625G

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: leg-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    networks:
      - leg-network
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@postgres:5432/leg?sslmode=disable
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 0.125G
        reservations:
          memory: 0.0625G

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: leg-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    networks:
      - leg-network
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 0.125G
        reservations:
          memory: 0.0625G

  # MongoDB Exporter
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39
    container_name: leg-mongodb-exporter
    restart: unless-stopped
    ports:
      - "9216:9216"
    networks:
      - leg-network
    environment:
      - MONGODB_URI=mongodb://leg:password123@mongodb:27017/leg
    depends_on:
      - mongodb
    command:
      - '--mongodb.uri=mongodb://leg:password123@mongodb:27017/leg'
      - '--collect-all'
    deploy:
      resources:
        limits:
          memory: 0.125G
        reservations:
          memory: 0.0625G

networks:
  leg-network:
    driver: bridge

volumes:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  mongodb-data:
  redis-data:
  node_modules:
  ssl-certs:
  npm_cache:
  vite_cache:
  prometheus-data:
  grafana-data:

# For production, after build, run:
# docker compose exec app composer install --optimize-autoloader --no-dev
# docker compose exec app php artisan config:cache
# docker compose exec app php artisan route:cache
# docker compose exec app php artisan view:cache 