services:
  # Nginx Service
  nginx:
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    container_name: leg-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html:delegated
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
      - ssl-certs:/etc/nginx/ssl
    networks:
      - leg-network
    depends_on:
      - app
    environment:
      - PERMISSIONS_USER=nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 10s
      retries: 3

  # PHP/Laravel Application
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: leg-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html:delegated
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    networks:
      - leg-network
    depends_on:
      - postgres
      - neo4j
      - mongodb
      - redis
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - PERMISSIONS_USER=www-data
      - RUN_MIGRATIONS=true
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 10s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16
    container_name: leg-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: leg
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - leg-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5
    container_name: leg-neo4j
    restart: unless-stopped
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - leg-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password123", "RETURN 1"]
      interval: 5s
      timeout: 10s
      retries: 10

  # MongoDB Document Database
  mongodb:
    image: mongo:7
    container_name: leg-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: leg
      MONGO_INITDB_ROOT_PASSWORD: password123
    volumes:
      - mongodb-data:/data/db
    networks:
      - leg-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb://leg:password123@localhost:27017/leg --quiet
      interval: 5s
      timeout: 5s
      retries: 10

  # Redis Cache
  redis:
    image: redis:alpine
    container_name: leg-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - leg-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Node service for frontend assets
  node:
    image: node:lts-alpine
    container_name: leg-node
    working_dir: /var/www/html
#    command: sh -c "npm install && npm run dev"
    command: sh -c "npm install -g npm@11.4.2 && npm install && npm run build"
    volumes:
      - ./:/var/www/html
      - node_modules:/var/www/html/node_modules
    networks:
      - leg-network
    ports:
      - "5173:5173"

  # Queue Worker for background jobs
  queue:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    container_name: leg-queue
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html:delegated
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    networks:
      - leg-network
    depends_on:
      - postgres
      - neo4j
      - mongodb
      - redis
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - CACHE_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - PERMISSIONS_USER=www-data
    command: php artisan queue:work redis --queue=imports,notifications,default --sleep=3 --tries=3 --max-time=3600

networks:
  leg-network:
    driver: bridge

volumes:
  postgres-data:
  neo4j-data:
  neo4j-logs:
  mongodb-data:
  redis-data:
  node_modules:
  ssl-certs:

# For production, after build, run:
# docker compose exec app composer install --optimize-autoloader --no-dev
# docker compose exec app php artisan config:cache
# docker compose exec app php artisan route:cache
# docker compose exec app php artisan view:cache 